import { MongoClient, ObjectId } from 'mongodb';
import { config } from 'dotenv';
import { resolve } from 'path';
import cron from 'node-cron';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
config({ path: resolve(process.cwd(), '.env') });

class UserController {
    client = null;
    bot = null;
    scheduledTasks = new Map();

    setBot(botInstance) {
        this.bot = botInstance;
        this.startScheduler();
    }

    async getCollection() {
        try {
            if (!this.client) {
                this.client = new MongoClient(process.env.MONGO_URL);
                await this.client.connect();
                console.log('Connected to MongoDB for reminders');
            }
            const database = this.client.db('Remind');
            return database.collection('reminds');
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
            throw error;
        }
    }

    async startScheduler() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');

        try {
            const collection = await this.getCollection();
            const allReminds = await collection.find({}).toArray();

            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allReminds.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);

            for (const remind of allReminds) {
                this.scheduleReminder(remind);
            }

            cron.schedule('1 0 * * *', async () => {
                console.log('üîç –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
                await this.rescheduleAllReminders();
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error);
        }
    }

    scheduleReminder(remind) {
        const remindId = remind._id.toString();

        if (this.scheduledTasks.has(remindId)) {
            this.scheduledTasks.get(remindId).stop();
            this.scheduledTasks.delete(remindId);
        }

        const remindType = remind.type; 
        const remindTime = remind.time; 
        const remindData = remind.remind;
        const chatId = remind.chatId;

        console.log(`üîç –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId}: type=${remindType}, time=${remindTime}`);

        if (!remindType || !remindTime) {
            console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${remindId}`);
            return;
        }

        try {
            let task;

            switch (remindType) {
                case 'daily':
                    task = this.scheduleDailyReminder(remindData, chatId, remindId, remindTime);
                    break;

                case 'specific':
                    task = this.scheduleSpecificReminder(remindData, chatId, remindId, remindTime, remind.date);
                    break;

                case 'weekly':
                    task = this.scheduleWeeklyReminder(remindData, chatId, remindId, remindTime, remind.days);
                    break;

                case 'after':
                    console.log(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "—á–µ—Ä–µ–∑ –≤—Ä–µ–º—è" ${remindId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
                    return;

                default:
                    console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${remindType}`);
                    return;
            }

            if (task) {
                this.scheduledTasks.set(remindId, task);
                console.log(`‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId} –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${remindId}:`, error);
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å time –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    scheduleDailyReminder(remindData, chatId, remindId, time) {
        const [hours, minutes] = time.split(':');
        const cronExpression = `${minutes} ${hours} * * *`;

        console.log(`üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId} –≤ ${time}`);

        return cron.schedule(cronExpression, async () => {
            await this.sendReminder(remindData, chatId, remindId);
        }, {
            scheduled: true,
            timezone: "Europe/Moscow"
        });
    }

    scheduleSpecificReminder(remindData, chatId, remindId, time, date) {
        if (!date) {
            console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${remindId}`);
            return null;
        }

        const [day, month, year] = date.split('.').map(Number);
        const [hours, minutes] = time.split(':');

        const reminderDate = new Date(year, month - 1, day, hours, minutes);
        const now = new Date();

        if (reminderDate < now) {
            console.log(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId} —É–∂–µ –ø—Ä–æ—à–ª–æ`);
            return null;
        }

        const delay = reminderDate.getTime() - now.getTime();

        console.log(`üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId} –Ω–∞ ${date} ${time}`);

        const timeout = setTimeout(async () => {
            await this.sendReminder(remindData, chatId, remindId);
            this.scheduledTasks.delete(remindId);
        }, delay);

        return {
            stop: () => clearTimeout(timeout)
        };
    }

    scheduleWeeklyReminder(remindData, chatId, remindId, time, days) {
        if (!days || !Array.isArray(days)) {
            console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${remindId}`);
            return null;
        }

        const [hours, minutes] = time.split(':');
        const daysMap = {
            '–ø–Ω': 1, '–≤—Ç': 2, '—Å—Ä': 3, '—á—Ç': 4, '–ø—Ç': 5, '—Å–±': 6, '–≤—Å': 0
        };

        const daysOfWeek = days.map(day => daysMap[day]).join(',');
        const cronExpression = `${minutes} ${hours} * * ${daysOfWeek}`;

        console.log(`üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId} –ø–æ ${days.join(',')} –≤ ${time}`);

        return cron.schedule(cronExpression, async () => {
            await this.sendReminder(remindData, chatId, remindId);
        }, {
            scheduled: true,
            timezone: "Europe/Moscow"
        });
    }
    
    async sendReminder(remindData, chatId, remindId) {
        try {
            if (!this.bot) {
                console.log('‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }

            console.log(`üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${remindId} –≤ —á–∞—Ç ${chatId}`);

            switch (remindData.type) {
                case 'text':
                    await this.bot.sendMessage(chatId, `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${remindData.content}`);
                    break;

                case 'photo':
                    await this.sendPhotoReminder(remindData, chatId);
                    break;

                case 'video':
                    await this.sendVideoReminder(remindData, chatId);
                    break;

                case 'document':
                    await this.sendDocumentReminder(remindData, chatId);
                    break;

                case 'voice':
                    await this.sendVoiceReminder(remindData, chatId);
                    break;

                case 'video_note':
                    await this.sendVideoNoteReminder(remindData, chatId);
                    break;

                case 'sticker':
                    await this.sendStickerReminder(remindData, chatId);
                    break;

                case 'location':
                    await this.bot.sendLocation(chatId, remindData.latitude, remindData.longitude);
                    break;

                case 'contact':
                    await this.bot.sendContact(
                        chatId,
                        remindData.phone_number,
                        remindData.first_name,
                        { last_name: remindData.last_name || '' }
                    );
                    break;

                case 'poll':
                    await this.bot.sendMessage(
                        chatId,
                        `üîî –û–ø—Ä–æ—Å: ${remindData.question}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: ${remindData.options.join(', ')}`
                    );
                    break;

                case 'media_group':
                    await this.sendMediaGroupReminder(remindData, chatId);
                    break;

                default:
                    await this.bot.sendMessage(chatId, `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${remindData.content || '–í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ!'}`);
            }

            console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${remindId}:`, error);

            if (error.response && error.response.statusCode === 403) {
                console.log(`üóëÔ∏è –ß–∞—Ç ${chatId} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId}`);
                await this.deleteReminderFromDB(remindId);
            }
        }
    }

    async deleteReminderFromDB(remindId) {
        try {
            const collection = await this.getCollection();
            await collection.deleteOne({ _id: new ObjectId(remindId) });
            console.log(`üóëÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${remindId} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${remindId}:`, error);
        }
    }

    async rescheduleAllReminders() {
        try {
            const collection = await this.getCollection();
            const allReminds = await collection.find({}).toArray();

            for (const task of this.scheduledTasks.values()) {
                task.stop();
            }
            this.scheduledTasks.clear();

            for (const remind of allReminds) {
                this.scheduleReminder(remind);
            }

            console.log(`‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${allReminds.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        }
    }

    stopScheduler() {
        for (const task of this.scheduledTasks.values()) {
            task.stop();
        }
        this.scheduledTasks.clear();
    }

    async closeConnection() {
        this.stopScheduler();
        if (this.client) {
            await this.client.close();
            console.log('MongoDB connection closed');
        }
    }
}

export default new UserController();