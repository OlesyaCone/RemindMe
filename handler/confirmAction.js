import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const filesDir = path.join(__dirname, '../files');

export async function confirmAction(bot, post) {
    const chatId = post.chatId;
    await bot.sendMessage(chatId, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?', {
        reply_markup: {
            inline_keyboard: [
                [{ text: "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "save" }],
                [{ text: "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel" }]
            ]
        }
    });

    bot.removeTextListener(/.*/);
}

export async function cancel(bot, post, chatId) {
    try {
        if (post.remind) {
            switch (post.remind.type) {
                case 'photo':
                case 'video':
                case 'document':
                case 'voice':
                case 'video_note':
                case 'sticker':
                    if (post.remind.file_id) {
                        await deleteFile(post.remind.file_id);
                    }
                    break;

                case 'media_group':
                    if (post.remind.items) {
                        for (const item of post.remind.items) {
                            if (item?.file_id) {
                                await deleteFile(item.file_id);
                            }
                        }
                    }
                    break;
            }
        }

        await bot.sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data: "back" }]
                ]
            }
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', err);
    }
}

async function deleteFile(filePath) {
    try {
        const cleanPath = filePath.replace(/^\.\.\//, '');
        const absolutePath = path.join(filesDir, cleanPath);

        if (fs.existsSync(absolutePath)) {
            fs.unlinkSync(absolutePath);
            console.log(`–§–∞–π–ª —É–¥–∞–ª—ë–Ω: ${absolutePath}`);
        }
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
    }
}

export async function save(bot, post, chatId) {

}