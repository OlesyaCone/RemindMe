import remindsStorage from './remindsStorage.js';
import api from '../../config/api.js';

export async function putReminds(bot, chatId) {
    const reminds = remindsStorage.getReminds(chatId);

    if (!reminds || reminds.length === 0) {
        await bot.sendMessage(chatId, 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
        return;
    }

    const inline_keyboard = [];

    for (let i = 0; i < reminds.length; i++) {
        const item = reminds[i];
        const remindObj = item.remind || item;

        const rawId = item._id || remindObj._id || item.id || remindObj.id;
        const id = rawId && rawId.toString ? rawId.toString() : null;

        if (!id) {
            console.warn(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ id (index ${i}):`, item);
            inline_keyboard.push([{
                text: `${i + 1} ‚ö†Ô∏è`,
                callback_data: `put_missing_${i}`
            }]);
            continue;
        }

        inline_keyboard.push([{
            text: String(i + 1),
            callback_data: `put_${id}`
        }]);
    }

    inline_keyboard.push([{ text: '‚¨ÖÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'back' }]);

    await bot.sendMessage(
        chatId,
        'üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
        { reply_markup: { inline_keyboard } }
    );
}

export async function updateRemindContent(bot, chatId, remindId, newContent) {
    try {
        await api.put(`/reminds/${remindId}`, { 
            content: newContent 
        });
        await bot.sendMessage(chatId, '‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è');
    }
}

export async function updateRemindTime(bot, chatId, remindId, newTime, type = 'daily') {
    try {
        await api.put(`/reminds/${remindId}`, { 
            remind: {
                type: type,
                time: newTime
            }
        });
        await bot.sendMessage(chatId, '‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏');
    }
}