import { handleDaily } from './dateSelection/dailyHandler.js';
import { handleSpecificDate } from './dateSelection/specificHandler.js';
import { handleWeekly } from './dateSelection/weeklyHandler.js';
import { handleAfterTime } from './dateSelection/afterHandler.js';
import { handleMyReminders } from './remindersHandler.js';
import { showMainMenu } from './menuUtils.js';
import { cancel, save } from './confirmAction.js';
import { putReminds } from './requests/putReminds.js';

export class CallbackHandler {
  constructor(bot) {
    if (CallbackHandler.instance) {
      return CallbackHandler.instance;
    }
    CallbackHandler.instance = this;
    this.bot = bot;
    this.postsStorage = new Map();
    this.clearStorage();
    this.setupCallbacks();
  }

  getClearStorage() {
    return this.clearStorage.bind(this);
  }

  async clearStorage() {
    this.postsStorage.clear();
    console.log('–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–æ');
  }

  async deleteMessage(chatId, messageId) {
    try {
      await this.bot.deleteMessage(chatId, messageId);
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–¥–∞–ª–µ–Ω–æ`);
    } catch (err) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}:`, err.message);
    }
  }

  setupCallbacks() {
    if (!this.callbacksSetUp) {
      this.bot.on('callback_query', async (callbackQuery) => {
        const data = callbackQuery.data;
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;

        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: ${data}, messageId: ${messageId}`);

        try {
          if (data.startsWith('save_') || data.startsWith('cancel_')) {
            const postId = String(data.split('_')[1]);
            console.log(`–ò—â–µ–º –ø–æ—Å—Ç —Å ID: ${postId}`);
            console.log(`–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:`, Array.from(this.postsStorage.keys()));

            const post = this.postsStorage.get(postId);

            if (!post) {
              console.log('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
              await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
              await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ', {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data: "back" }]
                  ]
                }
              });
              await this.deleteMessage(chatId, messageId);
              return;
            }

            console.log('–ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω:', post);

            try {
              if (data.startsWith('save_')) {
                console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
                await save(this.bot, post, chatId);
                await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' });
              } else {
                console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É...');
                await cancel(this.bot, post, chatId);
                await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' });
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è:', error);
              await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
              throw error;
            }

            this.postsStorage.delete(postId);
            console.log('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');

            await this.deleteMessage(chatId, messageId);
            return;
          }

          await this.deleteMessage(chatId, messageId);

          switch (data) {
            case 'daily':
              await handleDaily(this.bot, callbackQuery);
              break;
            case 'specific_date':
              await handleSpecificDate(this.bot, callbackQuery);
              break;
            case 'weekly':
              await handleWeekly(this.bot, callbackQuery);
              break;
            case 'after_time':
              await handleAfterTime(this.bot, callbackQuery);
              break;
            case 'my_reminders':
              await handleMyReminders(this.bot, callbackQuery);
              break;
            case 'put':
              await putReminds(this.bot, chatId);
              break;
            case 'back':
              await showMainMenu(this.bot, chatId);
              break;
            
            case String(data.match(/put_(\w+)/)?.input || ''):
              const remindId = data.split('_')[1];
              await this.bot.sendMessage(chatId, '–ß—Ç–æ –∏–∑–º–µ–Ω—è–µ–º?', {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üï∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data: `change_time_${remindId}` }],
                    [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data: `change_content_${remindId}` }],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_reminds' }]
                  ]
                }
              });
              break;

            case String(data.match(/change_time_(\w+)/)?.input || ''):
              const timeRemindId = data.split('_')[2];
              const { handleDaily } = await import('./dateSelection/dailyHandler.js');
              await handleDaily(this.bot, callbackQuery, timeRemindId);
              break;

            case String(data.match(/change_content_(\w+)/)?.input || ''):
              const contentRemindId = data.split('_')[2];
              const post = {
                type: 'put_content',
                remindId: contentRemindId,
                chatId: chatId,
                messageId: Date.now(),
                put: true
              };
              const { answerHandler } = await import('./dataHandler.js');
              await answerHandler(this.bot, post);
              break;

            case 'back_to_reminds':
              await putReminds(this.bot, chatId);
              break;

            default:
              await this.bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
          }

          await this.bot.answerCallbackQuery(callbackQuery.id);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', err);
          try {
            await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' });
          } catch (answerError) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback:', answerError);
          }
        }
      });
      this.callbacksSetUp = true;
    }
  }

  storePost(post) {
    this.postsStorage.set(String(post.messageId), post);
    console.log(`–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${post.messageId}`);
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', Array.from(this.postsStorage.keys()));
  }
}

let callbackHandlerInstance = null;

export function initCallbackHandler(bot) {
  callbackHandlerInstance = new CallbackHandler(bot);
  return callbackHandlerInstance;
}

export function getCallbackHandler() {
  if (!callbackHandlerInstance) {
    throw new Error("CallbackHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
  }
  return callbackHandlerInstance;
}